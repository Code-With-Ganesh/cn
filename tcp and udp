1) TCP
Server.c
#include &lt;stdio.h&gt;
#include &lt;netdb.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt; // read(), write(), close()
#define MAX 80
#define PORT 8080
#define SA struct sockaddr
// Function designed for chat between client and server.
void func(int connfd)
{
char buff[MAX];
int n;
// infinite loop for chat
for (;;) {
bzero(buff, MAX);
// read the message from client and copy it in buffer
read(connfd, buff, sizeof(buff));
// print buffer which contains the client contents
printf(&quot;From client: %s\t To client : &quot;, buff);
bzero(buff, MAX);
n = 0;
// copy server message in the buffer
while ((buff[n++] = getchar()) != &#39;\n&#39;)
;
// and send that buffer to client
write(connfd, buff, sizeof(buff));
// if msg contains &quot;Exit&quot; then server exit and chat ended.

if (strncmp(&quot;exit&quot;, buff, 4) == 0) {
printf(&quot;Server Exit...\n&quot;);
break;
}
}
}
// Driver function
int main()
{
int sockfd, connfd, len;
struct sockaddr_in servaddr, cli;
// socket create and verification
sockfd = socket(AF_INET, SOCK_STREAM, 0);
if (sockfd == -1) {
printf(&quot;socket creation failed...\n&quot;);
exit(0);
}
else
printf(&quot;Socket successfully created..\n&quot;);
bzero(&amp;servaddr, sizeof(servaddr));
// assign IP, PORT
servaddr.sin_family = AF_INET;
servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
servaddr.sin_port = htons(PORT);
// Binding newly created socket to given IP and verification
if ((bind(sockfd, (SA*)&amp;servaddr, sizeof(servaddr))) != 0) {
printf(&quot;socket bind failed...\n&quot;);
exit(0);
}
else
printf(&quot;Socket successfully binded..\n&quot;);
// Now server is ready to listen and verification
if ((listen(sockfd, 5)) != 0) {
printf(&quot;Listen failed...\n&quot;);
exit(0);

}
else
printf(&quot;Server listening..\n&quot;);
len = sizeof(cli);
// Accept the data packet from client and verification
connfd = accept(sockfd, (SA*)&amp;cli, &amp;len);
if (connfd &lt; 0) {
printf(&quot;server accept failed...\n&quot;);
exit(0);
}
else
printf(&quot;server accept the client...\n&quot;);
// Function for chatting between client and server
func(connfd);
// After chatting close the socket
close(sockfd);
}

TCP_client.c
#include &lt;arpa/inet.h&gt; // inet_addr()
#include &lt;netdb.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;strings.h&gt; // bzero()
#include &lt;sys/socket.h&gt;
#include &lt;unistd.h&gt; // read(), write(), close()
#define MAX 80
#define PORT 8080
#define SA struct sockaddr
void func(int sockfd)
{
char buff[MAX];
int n;
for (;;) {
bzero(buff, sizeof(buff));
printf(&quot;Enter the string : &quot;);

n = 0;
while ((buff[n++] = getchar()) != &#39;\n&#39;)
;
write(sockfd, buff, sizeof(buff));
bzero(buff, sizeof(buff));
read(sockfd, buff, sizeof(buff));
printf(&quot;From Server : %s&quot;, buff);
if ((strncmp(buff, &quot;exit&quot;, 4)) == 0) {
printf(&quot;Client Exit...\n&quot;);
break;
}
}
}
int main()
{
int sockfd, connfd;
struct sockaddr_in servaddr, cli;
// socket create and verification
sockfd = socket(AF_INET, SOCK_STREAM, 0);
if (sockfd == -1) {
printf(&quot;socket creation failed...\n&quot;);
exit(0);
}
else
printf(&quot;Socket successfully created..\n&quot;);
bzero(&amp;servaddr, sizeof(servaddr));
// assign IP, PORT
servaddr.sin_family = AF_INET;
servaddr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;);
servaddr.sin_port = htons(PORT);
// connect the client socket to server socket
if (connect(sockfd, (SA*)&amp;servaddr, sizeof(servaddr))
!= 0) {
printf(&quot;connection with the server failed...\n&quot;);
exit(0);
}

else
printf(&quot;connected to the server..\n&quot;);
// function for chat
func(sockfd);
// close the socket
close(sockfd);
}
OUTPUT â†’

2) UDP

Server
// Server side implementation of UDP client-server model
#include &lt;bits/stdc++.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netinet/in.h&gt;
#define PORT 8080
#define MAXLINE 1024
// Driver code
int main() {
int sockfd;
char buffer[MAXLINE];
const char *hello = &quot;Hello from server&quot;;
struct sockaddr_in servaddr, cliaddr;
// Creating socket file descriptor
if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0 ) {
perror(&quot;socket creation failed&quot;);
exit(EXIT_FAILURE);
}
memset(&amp;servaddr, 0, sizeof(servaddr));
memset(&amp;cliaddr, 0, sizeof(cliaddr));
// Filling server information
servaddr.sin_family = AF_INET; // IPv4
servaddr.sin_addr.s_addr = INADDR_ANY;
servaddr.sin_port = htons(PORT);
// Bind the socket with the server address
if ( bind(sockfd, (const struct sockaddr *)&amp;servaddr,
sizeof(servaddr)) &lt; 0 )
{
perror(&quot;bind failed&quot;);

exit(EXIT_FAILURE);
}
socklen_t len;
int n;
len = sizeof(cliaddr); //len is value/result
n = recvfrom(sockfd, (char *)buffer, MAXLINE,
MSG_WAITALL, ( struct sockaddr *) &amp;cliaddr,
&amp;len);
buffer[n] = &#39;\0&#39;;
printf(&quot;Client : %s\n&quot;, buffer);
sendto(sockfd, (const char *)hello, strlen(hello),
MSG_CONFIRM, (const struct sockaddr *) &amp;cliaddr,
len);
std::cout&lt;&lt;&quot;Hello message sent.&quot;&lt;&lt;std::endl;
return 0;
}

Client
// Client side implementation of UDP client-server model

#include &lt;bits/stdc++.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netinet/in.h&gt;
#define PORT 8080
#define MAXLINE 1024
// Driver code
int main() {
int sockfd;
char buffer[MAXLINE];
const char *hello = &quot;Hello from client&quot;;
struct sockaddr_in servaddr;
// Creating socket file descriptor
if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0 ) {
perror(&quot;socket creation failed&quot;);
exit(EXIT_FAILURE);
}
memset(&amp;servaddr, 0, sizeof(servaddr));
// Filling server information
servaddr.sin_family = AF_INET;
servaddr.sin_port = htons(PORT);
servaddr.sin_addr.s_addr = INADDR_ANY;
int n;
socklen_t len;
sendto(sockfd, (const char *)hello, strlen(hello),
MSG_CONFIRM, (const struct sockaddr *) &amp;servaddr,
sizeof(servaddr));
std::cout&lt;&lt;&quot;Hello message sent.&quot;&lt;&lt;std::endl;

n = recvfrom(sockfd, (char *)buffer, MAXLINE,
MSG_WAITALL, (struct sockaddr *) &amp;servaddr,
&amp;len);
buffer[n] = &#39;\0&#39;;
std::cout&lt;&lt;&quot;Server :&quot;&lt;&lt;buffer&lt;&lt;std::endl;
close(sockfd);
return 0;
}
