Commands demonstrate the working of following commands ping, tracert, nslookup, netstat, ARP,
RARP, ipconfig, ifconfig, dig, route.
1. PING (Packet Internet Groper) command is used to check the network connectivity between host
and server/host. This command takes as input the IP address or the URL and sends a data packet
to the specified address with the message “PING” and get a response from the server/host this
time is recorded which is called latency. Fast ping low latency means faster connection. Ping
uses ICMP(Internet Control Message Protocol) to send an ICMP echo message to the specified
host if that host is available then it sends ICMP reply message. Ping is generally measured in
millisecond every modern operating system has this ping pre-installed. 
Ping www.google.com
2. tracepath command in Linux is used to traces path to destination discovering MTU along this
path. It uses UDP port or some random port. It is similar to traceroute, but it does not require
superuser privileges and has no fancy options. tracepath6 is a good replacement
for traceroute6 and classic example of the application of Linux error queues. The situation with
IPv4 is worse because commercial IP routers do not return enough information in ICMP error
messages. Probably, it will change, when they will be updated. For now, it uses Van Jacobson’s
trick, sweeping a range of UDP ports to maintain trace history.
tracepath  www.google.com
3. Nslookup (stands for “Name Server Lookup”) is a useful command for getting information from
the DNS server. It is a network administration tool for querying the Domain Name System (DNS)
to obtain domain name or IP address mapping or any other specific DNS record. It is also used to
troubleshoot DNS-related problems. 
Nslookup google.com
4. Netstat command displays various network related information such as network connections,
routing tables, interface statistics, masquerade connections, multicast memberships etc.,
Netstat -lu / netstat -lt
5. arp command manipulates the System’s ARP cache. It also allows a complete dump of the ARP
cache. ARP stands for Address Resolution Protocol. The primary function of this protocol is to
resolve the IP address of a system to its mac address, and hence it works between level 2(Data
link layer) and level 3(Network layer). 
Arp -v / -n / -a
6. The RARP is on the Network Access Layer and is employed to send data between two points in a
very network. Each network participant has two unique addresses:- IP address (a logical address)
and MAC address (the physical address).  The IP address gets assigned by software and after that
the MAC address is constructed into the hardware. The RARP server that responds to RARP
requests, can even be any normal computer within the network. However, it must hold the data
of all the MAC addresses with their assigned IP addresses. If a RARP request is received by the
network, only these RARP servers can reply to it. The info packet needs to be sent on very cheap
layers of the network. This implies that the packet is transferred to all the participants at the
identical time.  The client broadcasts a RARP request with an Ethernet broadcast address and
with its own physical address. The server responds by informing the client its IP address.
rarp

7. Ip command in Linux is present in the net-tools which are used for performing several network
administration tasks. IP stands for Internet Protocol. This command is used to show or
manipulate routing, devices, and tunnels. It is similar to the  ifconfig  command, but it is much
more powerful with more functions and facilities attached to it. ifconfig is one of the deprecated
commands in the net-tools of Linux that has not been maintained for many years. The ip
command is used to perform several tasks like assigning an address to a network interface or
configuring network interface parameters. It can perform several other tasks like configuring and
modifying the default and static routing, setting up a tunnel over IP, listing IP addresses and
property information, modifying the status of the interface, and assigning, deleting, and setting
up IP addresses and routes. 
Ip -s link/ ip
8. ifconfig(interface configuration) command is used to configure the kernel-resident network
interfaces. It is used at the boot time to set up the interfaces as necessary. After that, it is usually
used when needed during debugging or when you need system tuning. Also, this command is
used to assign the IP address and netmask to an interface or to enable or disable a given
interface.
ifconfig
9. dig command stands for Domain Information Groper. It is used for retrieving information about
DNS name servers. It is basically used by network administrators. It is used for verifying and
troubleshooting DNS problems and to perform DNS lookups. Dig command replaces older tools.
Dig geeksforgeeks.org
10. The IP/kernel routing table acts as a crucial map, determining how network packets are
forwarded between different hosts and networks. By utilizing the route command, Linux
administrators and users can establish static routes, enabling precise control over network
connectivity and optimizing data transmission. In this comprehensive guide, we will explore the
intricacies of the route command in Linux, unravel its functionalities, and delve into detailed
examples to gain a profound understanding of its usage.
route

Build a simple network topology and configure it for static routing protocol using packetracer.
As per the manual given. Laptop pc router server cloud.

Use wireshark to understand the operations of TCP/IP layers
Same as done earlier

Create simple network topology and show UDP connections using NS2
Create simple network topology and show TCP connections using NS2
github

Perform network discovery using nmap

Socket programming using TCP
Server Side:
import socket
def server_program():
# get the hostname
host = socket.gethostname()
port = 5000 # initiate port no above 1024
server_socket = socket.socket() # get instance
# look closely. The bind() function takes tuple as
argument
server_socket.bind((host, port)) # bind host address and
port together
# configure how many client the server can listen
simultaneously
server_socket.listen(2)
conn, address = server_socket.accept() # accept new
connection
print(&quot;Connection from: &quot; + str(address))
while True:
# receive data stream. it won&#39;t accept data packet
greater than 1024 bytes
data = conn.recv(1024).decode()
if not data:
# if data is not received break
break
print(&quot;from connected user: &quot; + str(data))
data = input(&#39; -&gt; &#39;)
conn.send(data.encode()) # send data to the client
conn.close() # close the connection
if __name__ == &#39;__main__&#39;:
server_program()

Client Side:
import socket
def client_program():
host = socket.gethostname() # as both code is running on
same pc
port = 5000 # socket server port number
client_socket = socket.socket() # instantiate
client_socket.connect((host, port)) # connect to the
server
message = input(&quot; -&gt; &quot;) # take input
while message.lower().strip() != &#39;bye&#39;:
client_socket.send(message.encode()) # send message
data = client_socket.recv(1024).decode() # receive
response
print(&#39;Received from server: &#39; + data) # show in
terminal
message = input(&quot; -&gt; &quot;) # again take input
client_socket.close() # close the connection
if __name__ == &#39;__main__&#39;:
client_program()

socket programming using UDP
Server Side:
import socket
# Define the server IP address and port
server_ip = &#39;127.0.0.1&#39; # Replace with your server&#39;s IP
address or use &#39;localhost&#39; for local testing
server_port = 12345 # Choose a port number
# Create a UDP socket
server_socket = socket.socket(socket.AF_INET,
socket.SOCK_DGRAM)
# Bind the socket to the server address and port
server_socket.bind((server_ip, server_port))
print(f&quot;Server listening on {server_ip}:{server_port}&quot;)
while True:
try:
# Receive data from the client
data, client_address = server_socket.recvfrom(1024)
print(f&quot;Received message from {client_address}:
{data.decode(&#39;utf-8&#39;)}&quot;)
# Process the received data (You can add your own
logic here)
# Send a response back to the client
response = &quot;Message received by the server.&quot;
server_socket.sendto(response.encode(&#39;utf-8&#39;),
client_address)
except KeyboardInterrupt:
print(&quot;Server terminated by the user.&quot;)
break
# Close the server socket
server_socket.close()

Client Side:
import socket
# Define the server IP address and port
server_ip = &#39;127.0.0.1&#39; # Replace with the server&#39;s IP
address or use &#39;localhost&#39; for local testing
server_port = 12345 # Match the server&#39;s port number
# Create a UDP socket
client_socket = socket.socket(socket.AF_INET,
socket.SOCK_DGRAM)
while True:
try:
# Get user input
message = input(&quot;Enter a message (or &#39;exit&#39; to quit):
&quot;)
if message.lower() == &#39;exit&#39;:
break
# Send the message to the server
client_socket.sendto(message.encode(&#39;utf-8&#39;),
(server_ip, server_port))
# Receive a response from the server
response, server_address =
client_socket.recvfrom(1024)
print(f&quot;Response from server ({server_address}):
{response.decode(&#39;utf-8&#39;)}&quot;)
except KeyboardInterrupt:
print(&quot;Client terminated by the user.&quot;)

break
# Close the client socket
client_socket.close()

perform file transfer and access using FTP
1) How to install an FTP Server on Ubuntu 22.04 with VSFTPD
video link: https://www.youtube.com/watch?v=XNjOSY-wcb0
In
this video we will show you how to install VSFTPD to Setup FTP Server
on Ubuntu 22.04. FTP is one of the oldest Internet protocols that is
still widely used and is a standard protocol in TCP/IP.
Some of the commands are there in the video description.
2) How to Install Filezilla application On Ubuntu 20.4.1
Also we need to download Filezilla client Application.
Video link: https://www.youtube.com/watch?v=RsvJJbGuN00
FileZilla
is a cross-platform and free software FTP application, consisting of
FileZilla Client and FileZilla Server which allows us to upload or
download files to the FTP server also available for OS including Linux,
Windows, and MacOS.

perform remote login using telnet server
sudo apt install telnet
sudo apt install telnetd
sudo ufw allow 23/udp
sudo ufw reload/enable/disable
sudo useradd telnet
telnet -l telnet 192.168.67.54
logout

using netstat and route commands do the following
one view current routing table - ip route show
two add and delete routes - sudo ip route add 192.168.1.0/24 via 192.168.0.1 /// sudo ip route
del 192.168.1.0/24
three change default gateway- ip route show | grep default /// sudo ip route del default via
default_gateway_ip /// sudo ip route add default via new_gateway_ip
Replace `default_gateway_ip` with the actual IP address of the current default gateway:
Replace `new_gateway_ip` with the IP address of the new default gateway.

Apply network to building Class A and Class B network using router

Apply network tool to build Class A network using switch

Perform FTP or telnet or SSH server installation
This is ftp installing yt video

Analyse the PCAP file and drive to find out primary information about network
This is long network given and identify the tukda tukda use Wireshark
